---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Site/Navigation';
import Footer from '../../components/Site/Footer';
import UseCasePage from '../../components/UseCasePage.astro';

export const meta = {
  slug: 'level-5-build-docs',
  level: 5,
  title: 'Generate API Docs & Collections from traffic',
  headline: 'Build documentation and Postman collections that mirror real traffic so teams can starts from what already works.',
  excerpt: 'Transforms captured requests into OpenAPI docs and ready‑to‑use Postman collections, based on what’s actually happening.',
  // summary: {
  //   problem: 'Docs and samples drift from reality, leaving consumers guessing about what works.',
  //   outcome: 'Inspectr turns proven traffic and specs into living docs, reducing onboarding friction.',
  // },
  problem:
    'Your API works, but nobody is sure which endpoints exist, what payloads look like, or how to try them. Docs lag behind reality and sample requests are stale.',
  solution:
    'Inspectr helps to build up your documentation based on the past requests. It can even generate an OpenAPI document and Postman collection from the observed traffic.',
  helps: [
    'Developers documenting real endpoints after testing',
    'QA and backend teams aligning examples with live traffic',
    'Teams can start from a working Postman collection',
  ],
  outcomes: [
    'Build up documentation faster with real-examples',
    'Faster to reach a successful first API call',
    "Spend less time on writing documentation",
  ],
  relatedSlug: 'level-6-automate-quality-gates',
  worksWellWith: ['level-3-mock-apis', 'level-6-automate-quality-gates'],
  tryIt: {
    label: 'Create documentation from observed traffic',
  //   href: '/docs/guides/exposing-publicly/',
  },
  nextSlug: 'level-6-automate-quality-gates',
};

const modules = import.meta.glob('./level-*.astro', { eager: true });
const metaBySlug = new Map(Object.values(modules).map((mod) => [mod.meta.slug, mod.meta]));
const related = metaBySlug.get(meta.relatedSlug) ?? null;
const worksWith = meta.worksWellWith
  .map((slug) => metaBySlug.get(slug))
  .filter(Boolean);
const next = metaBySlug.get(meta.nextSlug) ?? related ?? meta;
---

<Layout>
  <Navigation client:load />
  <UseCasePage meta={meta} related={related} worksWith={worksWith} next={next} />
  <Footer />
</Layout>
